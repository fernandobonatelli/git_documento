comandos kubernetes

Antes de iniciar o nosso cluster precisamos desabilitar nossa swap, portanto:

# swapoff -a


E comente a entrada referente a swap em seu arquivo fstab:

# vim /etc/fstab



Agora vamos iniciar o nosso cluster

# kubeadm init --apiserver-advertise-address $(hostname -i)


O comando acima irá iniciar o cluster e em seguida exibirá a linha que de comando que preciso executar em meus outros nodes. 


[WARNING SystemVerification]: docker version is greater than the most recently validated version. Docker version: 18.05.0-ce. Max validated version: 17.03

...

To start using your cluster, you need to run the following as a regular user:

 mkdir -p $HOME/.kube

 sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

 sudo chown $(id -u):$(id -g) $HOME/.kube/config

... 

kubeadm join --token 39c341.a3bc3c4dd49758d5 IP_DO_MASTER:6443 --discovery-token-ca-cert-hash sha256:37092

...


# mkdir -p $HOME/.kube


# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config


# sudo chown $(id -u):$(id -g) $HOME/.kube/config


# kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

serviceaccount/weave-net created

clusterrole.rbac.authorization.k8s.io/weave-net created

clusterrolebinding.rbac.authorization.k8s.io/weave-net created

role.rbac.authorization.k8s.io/weave-net created

rolebinding.rbac.authorization.k8s.io/weave-net created

daemonset.extensions/weave-net created


Vamos listar esses podnetwork:


# kubectl get pods -n kube-system

NAME                                         READY       STATUS       RESTARTS   AGE

coredns-78fcdf6894-fzbp2          1/1              Running       0                    9m

coredns-78fcdf6894-vp6td          1/1              Running       0                    9m

etcd                                             1/1              Running       0                    7m

kube-apiserver                            1/1              Running       0                    8m

kube-controller-manager             1/1              Running       0                    8m

kube-proxy-smhxn                       1/1             Running        0                   9m

kube-scheduler-                           1/1             Running        0                   8m

weave-net-9b6kg                        2/2             Running       0                   2m


# kubeadm join --token 39c341.a3bc3c4dd49758d5 IP_DO_MASTER:6443 --discovery-token-ca-cert-hash sha256:37092 


Para verificar todos os nodes do cluster execute:


# kubectl get nodes

NAME                STATUS    ROLES     AGE       VERSION

linuxtips-centos    Ready     <none>    14s       v1.11.0

linuxtips-debian    Ready     master    14m       v1.11.0

linuxtips-debian2   Ready     master    13m       v1.11.0




Bora verificar se todos os nodes do nosso cluster estão ok:

# kubectl get nodes

NAME                STATUS    ROLES     AGE       VERSION

elliot-01    Ready     <none>    14s       v1.11.1

elliot-02    Ready     master    14m       v1.11.1

elliot-03    Ready     master    13m       v1.11.1


Vamos verificar os detalhes do node elliot-01

# kubectl describe node elliot-01


Está ruim de ficar digitando? use o auto-complete:

# source <(kubectl completion bash)


Verificando os pods:

# kubectl get pods


Verificando os pods do namespace do kubernetes, o kube-system:

# kubectl get pods -n kube-system


Usando o describe para ver detalhes de algum pod:

# kubectl  describe pod kube-apiserver-elliot-01 -n kube-system


Verificando os pods do namespace do kubernetes, o kube-system e utilizando a opção -o wide:

# kubectl get pods -n kube-system -o wide


Criando o nosso primeiro deployment:

# kubectl run meu-nginx --image nginx

deployment.apps/nginx created


Verificando o deployment criado:

# kubectl get deployments


Verificando o pod do nosso deployment:

# kubectl get pods


Usando o get pod e o get deployment juntos:

# kubectl get pod,deployments


Verificando os detalhes de nosso deployment:

# kubectl describe deployment meu-nginx


Aumentando a quantidade de replicas de nosso deployment:

# kubectl scale deployment meu-nginx --replicas=10


Verificando os pods de todos os namespaces:

# kubectl get pods --all-namespaces


Removendo nosso deployment:

# kubectl delete deployment meu-nginx

